# plugins/steps/messages.py
from airflow.providers.telegram.hooks.telegram import TelegramHook
import os
import logging

logger = logging.getLogger(__name__)

MLE_TELEGRAM_TOKEN = os.getenv('MLE_TELEGRAM_TOKEN')
MLE_TELEGRAM_CHAT_ID = os.getenv('MLE_TELEGRAM_CHAT_ID')

def send_telegram_notification(context, success=True):
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        hook = TelegramHook(token=MLE_TELEGRAM_TOKEN, chat_id=MLE_TELEGRAM_CHAT_ID)
        
        dag_id = context['dag'].dag_id
        run_id = context['run_id']
        task_instance = context.get('task_instance')
        
        if success:
            message = f"‚úÖ DAG {dag_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\nRun ID: {run_id}"
        else:
            exception = getattr(context, 'exception', None)
            error = str(exception) if exception else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            task_id = getattr(task_instance, 'task_id', 'N/A')
            message = (
                f"üî• –û—à–∏–±–∫–∞ –≤ DAG {dag_id}!\n"
                f"Run ID: {run_id}\n"
                f"–ó–∞–¥–∞—á–∞: {task_id}\n"
                f"–û—à–∏–±–∫–∞: {error}"
            )
        
        hook.send_message(text=message)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        raise

def send_telegram_success_message(context):
    """–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DAG"""
    send_telegram_notification(context, success=True)

def send_telegram_failure_message(context):
    """–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DAG"""
    send_telegram_notification(context, success=False)